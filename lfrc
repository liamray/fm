set drawbox true
set icons true
set hidden true
set ignorecase true
set ifs "\n"

cmd showDirInfo ${{
  size=$( du -csh ${fx} | grep 'total$' | sed 's/\t.*//g' )

  if [ "${f}" = "${fx}" ]
  then
    lf -remote "send echo Size = ${size}"
  else
    lf -remote "send echo Total Size = ${size}"
  fi
}}

cmd esc ${{
  set -e

  lf -remote 'send clear'
  lf -remote 'send setfilter'
  lf -remote 'send unselect'
}}

cmd makeACopy ${{
  set -e

  if [ -z "${f}" ] || [ ! -e "${f}" ]
  then
    return
  fi

  filePathShort=$( printf "${f}" | grep -o '.\{1,60\}$' )
  fileName=$( basename "${f}" )
  if ! newName=$( whiptail --inputbox --title "Make a copy" "Copy a [${filePathShort}] as:" "8" "78" "${fileName}" 3>&1 1>&2 2>&3 ) || [ -z "${newName}" ] || [ "${newName}" = "${fileName}" ]
  then
    return
  fi

  if [ -f "${f}" ]
  then
    cp "${f}" "${newName}"
    lf -remote "send select \"${newName}\""
    exit 0
  fi

  if [ -d "${f}" ]
  then
    cp -r "${f}" "${newName}"
    lf -remote "send select \"${newName}\""
    exit 0
  fi
}}

cmd copyNameToClipboard ${{
  set -e

  # not ideal but works in most cases (todo: improve)
  item=$( printf "${fx}" | sed 's-^.*/--' )

  case $(uname -s) in
      Linux*)     printf "${item}" | xsel --clipboard;;
      Darwin*)    printf "${item}" | pbcopy;;
  esac  
}}

cmd copyFullPathToClipboard ${{
  set -e

  case $(uname -s) in
      Linux*)     printf "${fx}" | xsel --clipboard;;
      Darwin*)    printf "${fx}" | pbcopy;;
  esac
}}

cmd pasteFile ${{
  set -e

  lf -remote 'send paste'
  lf -remote 'send clear'
  lf -remote 'send unselect'
}}

cmd delete ${{
  set -e

  if [ -z "${fx}" ] || [ -z "${fx}" ]
  then
    return
  fi

  #                           |  file name only | join lines
  fileNames=$( printf "${fx}" | sed 's-^.*/--'  | tr -s '\n' ','  )

  # fileNames length > 60? 
  if [ "${#fileNames}" -gt 60 ]
  then
    fileNames=$( printf "${fileNames}" | grep -o '.\{1,60\}$' | xargs printf "...%s" )
  fi

  if whiptail --title "Delete confirmation" --yesno --defaultno "Are you sure you want to delete a [${fileNames}] item(s)?" "8" "78" 3>&1 1>&2 2>&3
  then
    rm -rf -- ${fx}
    printf "\tThe following item(s) has been deleted:\n%s\n" "${fx}"
  fi
}}

cmd mkDir ${{
  set -e

  if ! dirName=$( whiptail --inputbox --title "New Directory" "Enter new directory name:" "8" "78" 3>&1 1>&2 2>&3 ) || [ -z "$dirName" ]
  then
    return
  fi

  mkdir "$dirName"
  lf -remote "send select \"$dirName\""
}}

cmd mkFile ${{
  set -e

  if ! fileName=$( whiptail --inputbox --title "New File" "Enter new file name:" "8" "78" 3>&1 1>&2 2>&3 ) || [ -z "${fileName}" ]
  then
    return
  fi

  vi "${fileName}"
  if [ -f "${fileName}" ]
  then
    lf -remote "send select \"${fileName}\""
  fi
}}

cmd rename ${{
  set -e

  if [ -z "${f}" ] || [ ! -e "${f}" ]
  then
    return
  fi

  shortName=$( basename "${f}" )
  if ! newName=$( whiptail --inputbox --title "Rename" "Enter a new name:" "8" "78" "${shortName}" 3>&1 1>&2 2>&3 ) || [ -z "${newName}" ]
  then
    return
  fi

  mv "${shortName}" "${newName}"
  lf -remote "send select \"${newName}\""
}}

cmd menu ${{
  set -e

  lfrcMenu="${HOME}/.config/lf/lfrc-menu.txt"

  if [ ! -f "${lfrcMenu}" ]
  then
    echo "The quick menu [${lfrcMenu}] file not found"
    exit 0
  fi

  counter=0
  while read REPLY
  do
    if [ -z "${REPLY}" ]
    then
      continue
    fi

    counter=$(( counter + 1 ))

    item=$( printf "${REPLY}" | sed 's/ |.*//g' )
    set -- "$@" "${counter}" "${item}"
  done < "${lfrcMenu}"

  if ! itemNr=$( whiptail --title "Quick menu" --menu "Choose an option" 25 78 16 "${@}" 3>&1 1>&2 2>&3 ) || [ -z "${itemNr}" ]
  then
    return
  fi

  # retrieving command
  command=$( cat "${lfrcMenu}" | grep . | sed -n "${itemNr}p" | sed 's/^[^|]*| //g' )

  echo "Executing the following command: [${command}]"
  sh -c "${command}"
}}

cmd viewFile ${{
  if [ -n "${f}" ] && [ -f "${f}" ]
  then
    less "${f}" || :
  fi
}}

cmd editFile ${{
  if  [ -n "${f}" ] && [ -f "${f}" ]
  then
    vi "${f}"
  fi
}}

cmd findFiles ${{
  set -ex

  itemPath="${LF_SETTINGS_DIR}/last-find-files-text"
  text=$( cat "${itemPath}" || : )

  if ! text=$( whiptail --inputbox --title "Find files" "Enter file/dir name to find:" "8" "78" "${text}" 3>&1 1>&2 2>&3 ) || [ -z "$text" ]
  then
    return
  fi

  printf "${text}" > "${itemPath}"

  counter=0
  find . 2>/dev/null | grep "${text}" | while read REPLY
  do
    counter=$((counter+1))
    printf "${counter}) ${REPLY}\n" | tee /dev/stderr
  done | less +/${text}
}}

cmd findInFiles ${{
  set -e

  itemPath="${LF_SETTINGS_DIR}/last-find-in-files-text"
  text=$( cat "${itemPath}" || : )

  if ! text=$( whiptail --inputbox --title "Find IN files" "Enter text to find:" "8" "78" "${text}" 3>&1 1>&2 2>&3 ) || [ -z "$text" ]
  then
    return
  fi

  printf "${text}" > "${itemPath}"

  counter=0
  find . -type f | while read REPLY
  do
    grepped=
    if grepped=$( cat "${REPLY}" | grep "${text}" 2>&1 )
    then
      counter=$((counter+1))
      printf "${counter} ${REPLY}\n\t${grepped}\n\n" | tee /dev/stderr
    fi
  done | less +/"${text}"
}}

map p
map f filter
map c copy
map v paste
map x cut
map i showDirInfo
map . set hidden!
map o !true

map <enter> open
map <esc> esc
map <insert> :toggle; down
map <a-c> copyNameToClipboard
map <c-c> copyFullPathToClipboard
map <delete> delete
map <f-2> menu
map <f-3> viewFile
map <f-4> editFile
map <f-5> makeACopy
map <f-6> rename
map <f-7> mkDir
map <f-8> mkFile
map <f-12> $ echo 'lf installation command goes here'
map <c-f> findFiles
map <a-f> findInFiles

# jump to dirs
map <c-_> cd /
map h cd ~
map w cd ~/workspaces
map t cd ~/tmp
map d cd ~/Downloads

map r $ echo ${LF_SETTINGS_DIR}
